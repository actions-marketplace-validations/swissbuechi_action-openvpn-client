name: 'Connect OpenVPN'
description: 'A GitHub Action for connecting to an OpenVPN SSL server '
author: 'Raphael BÃ¼chi aka swissbuechi'
inputs:
  dns-server:
    description: 'DNS server to use over the VPN'
    required: true
  test-ping-host:
    description: 'Host IP to ping for VPN connection test, DNS names not supported, use test-dns-host instead'
    required: false
  tets-dns-host:
    description: 'Internal hostname to resolve for VPN connection test'
    required: false
  host:
    description: 'DNS or IP of OpenVPN server'
    required: true
  port:
    description: 'Port of OpenVPN server'
    required: false
    default: '443'
  username:
    description: 'VPN username'
    required: true
  password:
    description: 'VPN password'
    required: true
  otp-hex:
    description: 'OTP hex string'
    required: false
  otp-timezone:
    description: 'Timezone for OTP'
    required: false
  ca:
    description: 'VPN config CA'
    required: false
  cert:
    description: 'VPN config Cert'
    required: false
  cert-key:
    description: 'VPN config Cert Key'
    required: false
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Set Timezone
      uses: szenius/set-timezone@v1.1
      with:
        timezoneLinux: ${{ inputs.otp-timezone }}
      if: inputs.otp-timezone != null

    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt --assume-yes --no-install-recommends install openvpn oathtool resolvconf

    - name: Setup VPN config
      run: |
        echo "${{ secrets.VPN_CA_CRT }}" > ca.crt
        echo "${{ secrets.VPN_CERT_CRT }}" > cert.crt
        echo "${{ secrets.VPN_CERT_KEY }}" > cert.key
        echo "${{ secrets.VPN_USERNAME_PASSWORD }}" > secret.txt
        sed -i 's/AUTO_REPLACED_HOST/'"${{ secrets.VPN_HOST }}"'/g' ${{ env.OVPN_CONFIG }}
        sed -i 's/AUTO_REPLACED_PORT/'"${{ secrets.VPN_PORT }}"'/g' ${{ env.OVPN_CONFIG }}

    - name: Add VPN TOTP
      env:
        VPN_OTP: ${{ secrets.VPN_OTP }}
      if: inputs.otp-hex != null
      run: |
        OTP=$(oathtool --totp ${{ secrets.VPN_OTP }})
        sed -i '$ s/$/'"$OTP"'/' secret.txt

    - name: Connect VPN
      run: sudo openvpn --config ${{ env.OVPN_CONFIG }} --auth-user-pass secret.txt --log "vpn.log" --daemon

    - name: Wait for a VPN connection
      timeout-minutes: 1
      run: until dig @${{ env.VPN_DNS_HOST }} ${{ env.VPN_DNS_HOST }} A +time=1; do sleep 2; done

    - name: Update resolvconf
      run: |
        sudo chmod 777 /etc/resolvconf/resolv.conf.d/head
        sudo echo "nameserver ${{ env.VPN_DNS_HOST }}" >> /etc/resolvconf/resolv.conf.d/head
        sudo resolvconf -u

    - name: Configure SSH keys
      run: |
        echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" >  .ssh/ansible_id_rsa
        echo "${{ secrets.ANSIBLE_SSH_PUBLIC_KEY }}" >  .ssh/ansible_id_rsa.pub
        sudo chmod -R 700 .ssh/

    - name: Run Anisble Playbook
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: master.yml
        key: ${{secrets.ANSIBLE_SSH_PRIVATE_KEY}}
        requirements: requirements.yml
        options: |
          --inventory inventory
          --verbose
          --limit "dkapl01"
          --check

    - name: Kill VPN connection
      if: always()
      run: sudo killall openvpn

    - name: Publish VPN log
      if: always()
      run: sudo chmod 777 vpn.log

    - name: Upload VPN logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: VPN logs
        path: vpn.log

